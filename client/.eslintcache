[{"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\index.js":"1","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\App.js":"2","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\reportWebVitals.js":"3","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\AppHeader.js":"4","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\ApplicationViews.js":"6","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\QuizProvider.js":"7","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Register.js":"8","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Quiz.js":"9","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Login.js":"10","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostProvider.js":"11","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\TagProvider.js":"12","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\NewPost.js":"13","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Discover.js":"14","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostList.js":"15","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostCard.js":"16","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagList.js":"17","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagCard.js":"18","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\utils\\WindowChecker.js":"19","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostTagProvider.js":"20","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Search.js":"21"},{"size":704,"mtime":1611785049579,"results":"22","hashOfConfig":"23"},{"size":501,"mtime":1611952599344,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":2884,"mtime":1612295565725,"results":"26","hashOfConfig":"23"},{"size":3018,"mtime":1612119508180,"results":"27","hashOfConfig":"23"},{"size":1810,"mtime":1612295029896,"results":"28","hashOfConfig":"23"},{"size":821,"mtime":1611952871632,"results":"29","hashOfConfig":"23"},{"size":5216,"mtime":1612115622470,"results":"30","hashOfConfig":"23"},{"size":4412,"mtime":1612209312688,"results":"31","hashOfConfig":"23"},{"size":2124,"mtime":1612119467769,"results":"32","hashOfConfig":"23"},{"size":2520,"mtime":1612295542431,"results":"33","hashOfConfig":"23"},{"size":1136,"mtime":1612279794495,"results":"34","hashOfConfig":"23"},{"size":5169,"mtime":1612217283160,"results":"35","hashOfConfig":"23"},{"size":645,"mtime":1612212522446,"results":"36","hashOfConfig":"23"},{"size":294,"mtime":1612290171628,"results":"37","hashOfConfig":"23"},{"size":3533,"mtime":1612212617667,"results":"38","hashOfConfig":"23"},{"size":286,"mtime":1612205360659,"results":"39","hashOfConfig":"23"},{"size":133,"mtime":1612200275431,"results":"40","hashOfConfig":"23"},{"size":185,"mtime":1612209274162,"results":"41","hashOfConfig":"23"},{"size":2096,"mtime":1612295115830,"results":"42","hashOfConfig":"23"},{"size":881,"mtime":1612295211132,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1pem0fl",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\index.js",[],["94","95"],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\App.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\reportWebVitals.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\AppHeader.js",["96","97","98","99"],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\UserProfileProvider.js",["100"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { Spinner } from \"reactstrap\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport const UserProfileContext = createContext();\r\n\r\nexport function UserProfileProvider(props) {\r\n  const apiUrl = \"/api/userprofile\";\r\n  const history = useHistory();\r\n\r\n  const userProfile = localStorage.getItem(\"userProfile\");\r\n  const [isLoggedIn, setIsLoggedIn] = useState(userProfile != null);\r\n\r\n  const [isFirebaseReady, setIsFirebaseReady] = useState(false);\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((u) => {\r\n      setIsFirebaseReady(true);\r\n    });\r\n  }, []);\r\n\r\n  const login = (email, pw) => {\r\n    return firebase.auth().signInWithEmailAndPassword(email, pw)\r\n      .then((signInResponse) => getUserProfile(signInResponse.user.uid))\r\n      .then((userProfile) => {\r\n        if (userProfile.approved === 1) {\r\n          localStorage.setItem(\"userProfile\", JSON.stringify(userProfile));\r\n          setIsLoggedIn(true);\r\n          return userProfile\r\n        } else if (userProfile.approved === 2) {\r\n          localStorage.setItem(\"userProfile\", JSON.stringify(userProfile))\r\n          setIsLoggedIn(true);\r\n          return userProfile\r\n        }\r\n      });\r\n  };\r\n\r\n  const logout = () => {\r\n    return firebase.auth().signOut()\r\n      .then(() => {\r\n        localStorage.clear()\r\n        setIsLoggedIn(false);\r\n      });\r\n  };\r\n\r\n  const register = (userProfile, password) => {\r\n    return firebase.auth().createUserWithEmailAndPassword(userProfile.email, password)\r\n      .then((createResponse) => saveUser({ ...userProfile, firebaseUserId: createResponse.user.uid }))\r\n      .then((savedUserProfile) => {\r\n        localStorage.setItem(\"userProfile\", JSON.stringify(savedUserProfile));\r\n        setIsLoggedIn(true);\r\n      });\r\n  };\r\n\r\n  const getToken = () => firebase.auth().currentUser.getIdToken();\r\n\r\n  const getUserProfile = (firebaseUserId) => {\r\n    return getToken().then((token) =>\r\n      fetch(`${apiUrl}/${firebaseUserId}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      }).then(resp => resp.json()));\r\n  };\r\n\r\n  const saveUser = (userProfile) => {\r\n    return getToken().then((token) =>\r\n      fetch(apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(userProfile)\r\n      }).then(resp => resp.json()));\r\n  };\r\n\r\n  const getCurrentUser = () => {\r\n    const user = localStorage.getItem(\"userProfile\");\r\n    if (!user) {\r\n      return null;\r\n    }\r\n    return JSON.parse(user);\r\n  };\r\n\r\n  return (\r\n    <UserProfileContext.Provider value={{ isLoggedIn, login, logout, register, getToken, getCurrentUser }}>\r\n      {isFirebaseReady\r\n        ? props.children\r\n        : <Spinner className=\"app-spinner dark\" />}\r\n    </UserProfileContext.Provider>\r\n  );\r\n}","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\ApplicationViews.js",["101","102"],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\QuizProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Register.js",["103"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport \"./Register.css\"\r\n\r\nconst Register = () => {\r\n  const { register } = useContext(UserProfileContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [displayName, setDisplayName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [pronouns, setPronouns] = useState(\"\");\r\n  const [bio, setBio] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirm, setConfirm] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const [imageLoading, setImageLoading] = useState(false)\r\n\r\n\r\n  const uploadImage = async e => {\r\n    const files = e.target.files\r\n    setImageLoading(true)\r\n    const data = new FormData()\r\n    data.append('file', files[0])\r\n    data.append('upload_preset', 'vugr9ics')\r\n    const res = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dddadzenw/image/upload',\r\n      {\r\n        method: \"POST\",\r\n        body: data\r\n      }\r\n    )\r\n    const file = await res.json()\r\n    let image = file.secure_url\r\n    localStorage.setItem(\"image\", image)\r\n\r\n    setImageLoading(false)\r\n    const matches = document.querySelectorAll(\".hidden\");\r\n    for (const m of matches) {\r\n      m.style.display = \"block\"\r\n    }\r\n    document.querySelector(\".notHidden\").style.display = \"none\"\r\n  }\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (password !== confirm) {\r\n\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const imageLocation = localStorage.getItem(\"image\")\r\n    const profile = {\r\n      displayName,\r\n      email,\r\n      imageLocation,\r\n      pronouns,\r\n      bio\r\n    };\r\n    register(profile, password)\r\n      .then((user) => {\r\n        setLoading(false);\r\n        history.push(\"/quiz\");\r\n        localStorage.removeItem(\"image\")\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form\">\r\n      <form onSubmit={handleSubmit}>\r\n        <h2 className=\"text-center\">User Register</h2>\r\n        <div className=\"form-group\">\r\n          <div className='defaultImageContainer'>\r\n            <img className='defaultImage' src={localStorage.image ? localStorage.image : 'https://build.dfomer.com/wp-content/uploads/2016/04/dummy-post-horisontal-thegem-blog-default.jpg'} />\r\n          </div>\r\n\r\n          {imageLoading ? (\r\n            <h6 className=\"loadingImage\">Loading...</h6>\r\n          ) : <></>}\r\n\r\n\r\n          <br />\r\n          <label htmlFor=\"embedpollfileinput\" className=\"btn btn-info notHidden\">\r\n            Upload image\r\n          </label>\r\n          <input hidden type=\"file\" onChange={uploadImage} className=\"inputfile\" id=\"embedpollfileinput\" />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setDisplayName(e.target.value)}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"displayName\"\r\n            placeholder=\"Display Name\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setPronouns(e.target.value)}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"pronouns\"\r\n            placeholder=\"Pronouns\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setBio(e.target.value)}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"bio\"\r\n            placeholder=\"Bio\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setConfirm(e.target.value)}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            name=\"confirmPassword\"\r\n            placeholder=\"Confirm Password\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Button type=\"submit\" block color=\"danger\" disabled={loading}>\r\n            Sign Up\r\n          </Button>\r\n        </div>\r\n        <div className=\"text-center small\">\r\n          Already have an account?\r\n          <div>\r\n            <Link to=\"/login\">Log in here</Link>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Quiz.js",["104","105","106","107","108"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { QuizContext } from \"../providers/QuizProvider\"\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport { Form, FormGroup } from \"reactstrap\"\r\nimport \"./Quiz.css\"\r\nimport WindowChecker from \"../utils/WindowChecker\";\r\n\r\nconst Quiz = () => {\r\n  const [newPost, setNewPost] = useState([]);\r\n  const { getToken, logout } = useContext(UserProfileContext);\r\n  const history = useHistory();\r\n\r\n  const handleSubmitQuiz = (e) => {\r\n    e.preventDefault();\r\n    const answers = []\r\n    for (const id of newPost) {\r\n      if (id !== undefined) {\r\n        answers.push(parseInt(id))\r\n      }\r\n    }\r\n    const answer = { \"answers\": answers }\r\n\r\n    return getToken().then((token) =>\r\n      fetch(`/api/userprofile/answer`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(answers)\r\n      }).then(resp => resp.json())\r\n        .then((resp) => {\r\n          if (resp.approved === 1) {\r\n            history.push(\"/\")\r\n          } else {\r\n            logout()\r\n          }\r\n        }))\r\n  }\r\n\r\n  const handleControlledInputChange = (event) => {\r\n    newPost[event.target.name] = event.target.id\r\n  }\r\n\r\n  // const handleControlledCheckChange = (event) => {\r\n  //   if (event.target.checked === true) {\r\n  //     newPost[event.target.name] += (event.target.id)\r\n  //   } else {\r\n  //     newPost[event.target.name] -= (event.target.id)\r\n  //   }\r\n  // }\r\n\r\n  const { quiz, getQuiz } = useContext(QuizContext);\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getQuiz();\r\n  }, [])\r\n\r\n  const QuestionCard = ({ question }) => {\r\n\r\n    const questionCard = (q) => {\r\n      if (q.questionType.name === \"MultipleChoice\") {\r\n        return (<>\r\n          <fieldset className=\"questionBox\" id={q.id}>\r\n            <div className=\"form-group\">\r\n              <div className=\"questionTitle\">{q.content}</div>\r\n              {q.answers.map((a) => {\r\n                return (<>\r\n                  <input type=\"radio\" className=\"quizAnswer\" value={a.id} name={q.id} id={a.id} required=\"required\"\r\n                    onChange={(e) => { handleControlledInputChange(e) }}></input>\r\n                  <label htmlFor={a.id}>{a.content}</label><br />\r\n                </>)\r\n              })}\r\n            </div>\r\n          </fieldset>\r\n        </>\r\n        )\r\n      } else if (q.questionType.name === \"TrueFalse\") {\r\n        return (<>\r\n          <fieldset className=\"questionBox\" id={q.id}>\r\n            <div className=\"form-group\">\r\n              <div className=\"questionTitle\">{q.content}</div>\r\n              {q.answers.map((a) => {\r\n                return (<>\r\n                  <input type=\"radio\" className=\"quizAnswer\" value={a.id} name={q.id} id={a.id} required=\"required\"\r\n                    onChange={(e) => { handleControlledInputChange(e) }}></input>\r\n                  <label htmlFor={a.id}>{a.content}</label><br />\r\n                </>)\r\n              })}\r\n            </div>\r\n          </fieldset>\r\n        </>\r\n        )\r\n      }\r\n      // else if (q.questionType.name === \"MultipleAnswer\") {\r\n      //   return (<>\r\n      //     <fieldset id={q.id}>\r\n      //       <div>{q.content}</div>\r\n      //       {q.answers.map((a) => {\r\n      //         return (<>\r\n      //           <input type=\"checkbox\" class=\"check\" value={a.id} name={q.id} id={a.id}\r\n      //             onChange={(e) => { handleControlledCheckChange(e) }}\r\n      //             defaultChecked={false}></input>\r\n      //           <label htmlFor={a.id}>{a.content}</label><br />\r\n      //         </>)\r\n      //       })}\r\n      //     </fieldset>\r\n      //   </>\r\n      //   )\r\n      // }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        { questionCard(question)}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <section className=\"new-post-form-container\">\r\n      <div className=\"new-post-form-area\">\r\n        <h2 className=\"new-post-form-title\">Quiz Time!</h2>\r\n        <form className=\"quiz-form\">\r\n          {quiz.map((q) => (\r\n\r\n            <QuestionCard key={q.id} question={q} />\r\n\r\n          ))}\r\n          <button className=\"btn btn-quiz-submit\" onClick={(e) => { handleSubmitQuiz(e) }}>Submit Quiz</button>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Quiz;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Login.js",["109"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\nconst Login = () => {\r\n  const { login, getCurrentUser } = useContext(UserProfileContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    login(email, password)\r\n      .then((user) => {\r\n        setLoading(false);\r\n        if (user.approved === 2) {\r\n          history.push(\"/quiz\")\r\n        } else {\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form\">\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"avatar bg-primary\">\r\n        </div>\r\n        <h2 className=\"text-center\">User Login</h2>\r\n        <div className=\"form-group\">\r\n          <Input\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <Input\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <Button type=\"submit\" block color=\"danger\" disabled={loading}>\r\n            Sign in\r\n          </Button>\r\n        </div>\r\n        <div className=\"text-center small\">\r\n          Don't have an account?\r\n          <div>\r\n            <Link to=\"/register\">Sign up here</Link>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\TagProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\NewPost.js",["110","111","112"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { TagContext } from \"../providers/TagProvider\"\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport WindowChecker from \"../utils/WindowChecker\";\r\nimport \"./NewPost.css\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport { FormGroup } from \"reactstrap\"\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport { PostTagContext } from \"../providers/PostTagProvider\"\r\n\r\nconst NewPost = () => {\r\n  const { tags, getTags } = useContext(TagContext);\r\n  const { getToken } = useContext(UserProfileContext);\r\n  const { addPostTag } = useContext(PostTagContext);\r\n  const [multiSelections, setMultiSelections] = useState([]);\r\n  const [post, setPost] = useState([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getTags();\r\n  }, []);\r\n\r\n  const [imageLoading, setImageLoading] = useState(false)\r\n\r\n  const uploadImage = async e => {\r\n    const files = e.target.files\r\n    setImageLoading(true)\r\n    const data = new FormData()\r\n    data.append('file', files[0])\r\n    data.append('upload_preset', 'vugr9ics')\r\n    const res = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dddadzenw/image/upload',\r\n      {\r\n        method: \"POST\",\r\n        body: data\r\n      }\r\n    )\r\n    const file = await res.json()\r\n    let image = file.secure_url\r\n    const newImage = localStorage.setItem(\"image\", image);\r\n\r\n    setImageLoading(false)\r\n    const matches = document.querySelectorAll(\".hidden\");\r\n    for (const m of matches) {\r\n      m.style.display = \"block\"\r\n    }\r\n    document.querySelector(\".notHidden\").style.display = \"none\"\r\n  }\r\n\r\n  const submitPost = (post) => {\r\n    getToken().then((token) => {\r\n      fetch(`/api/post`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(post)\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          for (const tag of multiSelections) {\r\n            const postId = res.id;\r\n            const tagId = tag.id;\r\n            const postTag = {\r\n              postId,\r\n              tagId\r\n            };\r\n            addPostTag(postTag)\r\n          }\r\n        })\r\n        .then((data) => history.push(`/`))\r\n        .then(localStorage.removeItem(\"image\"))\r\n    })\r\n  }\r\n\r\n  const handleControlledInputChange = (event) => {\r\n    const newPost = { ...post }\r\n    newPost[event.target.name] = event.target.value\r\n    setPost(newPost)\r\n  }\r\n\r\n  const handleClickSubmitPost = (event) => {\r\n    event.preventDefault()\r\n    post.imageLocation = localStorage.getItem(\"image\");\r\n\r\n    const user = JSON.parse(localStorage.getItem('userProfile'));\r\n    if (user == null) {\r\n      history.push(\"/login\")\r\n    }\r\n    else {\r\n      submitPost(post)\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <section className=\"new-post-form-container\">\r\n      <div className=\"new-post-form-area\">\r\n        <h2 className=\"new-post-form-title\">Create A New Post</h2>\r\n        <form id=\"newPostForm\" onSubmit={(e) => { handleClickSubmitPost(e) }}>\r\n          <fieldset>\r\n            <div className=\"form-group uploadForm\">\r\n              <div className='defaultImageContainer'>\r\n                <img className='defaultImage' src={localStorage.image ? localStorage.image : 'https://build.dfomer.com/wp-content/uploads/2016/04/dummy-post-horisontal-thegem-blog-default.jpg'} />\r\n              </div>\r\n              {imageLoading ? (\r\n                <h6 className=\"loadingImage\">Loading...</h6>\r\n              ) : <></>}\r\n              <br />\r\n              <label htmlFor=\"embedpollfileinput\" className=\"btn btn-info notHidden uploadButton\">\r\n                Upload image\r\n              </label>\r\n              <input hidden type=\"file\" onChange={uploadImage} className=\"inputfile\" id=\"embedpollfileinput\" />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <div className=\"form-group hidden\">\r\n              <label className=\"new-post-label\" htmlFor=\"newBody\"></label>\r\n              <input type=\"textarea\" className=\"newBody\" id=\"content\" name=\"content\" placeholder=\"Tell us more!\" onChange={(e) => { handleControlledInputChange(e) }} required autoFocus />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <div className=\"form-group hidden\">\r\n              <FormGroup style={{ marginTop: '20px' }}>\r\n                <Typeahead\r\n                  id=\"basic-typeahead-multiple\"\r\n                  labelKey=\"name\"\r\n                  multiple\r\n                  onChange={setMultiSelections}\r\n                  options={tags}\r\n                  placeholder=\"Choose tags...\"\r\n                  selected={multiSelections}\r\n                />\r\n              </FormGroup>\r\n            </div>\r\n          </fieldset>\r\n          <fieldset className=\"hidden\">\r\n            <button className=\"submitNewPostBtn hidden btn btn-success\" type=\"submit\" > Submit Post </button>\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default NewPost;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Discover.js",["113","114"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport PostList from '../components/PostList';\r\nimport { PostContext } from '../providers/PostProvider'\r\nimport { Container, Col, Row } from \"reactstrap\"\r\nimport WindowChecker from '../utils/WindowChecker';\r\n\r\nconst Explore = () => {\r\n  const { posts, getAllPosts } = useContext(PostContext);\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getAllPosts();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <PostList posts={posts} />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Explore;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostList.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostCard.js",["115","116"],"import React, { useContext, useState } from \"react\";\r\nimport { Card, Button, ButtonGroup, Form, InputGroup, Input, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport TagList from \"./TagList\"\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport { PostContext } from \"../providers/PostProvider\"\r\nimport \"../pages/Discover.css\"\r\n\r\nconst PostCard = ({ post }) => {\r\n  const { getCurrentUser } = useContext(UserProfileContext);\r\n  const { updatePost, deletePost } = useContext(PostContext);\r\n  const user = getCurrentUser();\r\n  const history = useHistory();\r\n  const [isEditing, setIsEditing] = useState(false);\r\n  const [pendingDelete, setPendingDelete] = useState(false);\r\n  const [postEdits, setPostEdits] = useState(\"\");\r\n\r\n  const showEditForm = () => {\r\n    setIsEditing(true);\r\n    setPostEdits(post.context);\r\n  };\r\n\r\n  const hideEditForm = () => {\r\n    setIsEditing(false);\r\n    setPostEdits(\"\");\r\n  };\r\n\r\n  const createEditPost = () => {\r\n    post.context = postEdits;\r\n  };\r\n\r\n  const EditButton = () => {\r\n    const user = JSON.parse(localStorage.getItem('userProfile'));\r\n    if (post.authorId === user.id) {\r\n      return (\r\n        <>\r\n          <ButtonGroup size=\"sm\">\r\n            <Button className=\"btn btn-primary\" onClick={showEditForm}>\r\n              Edit\r\n            </Button>\r\n            <Button\r\n              className=\"btn btn-danger\"\r\n              onClick={(e) => setPendingDelete(true)}\r\n            >\r\n              Delete\r\n            </Button>\r\n          </ButtonGroup>\r\n        </>\r\n      )\r\n    } else {\r\n      return null\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <div>\r\n        <div>\r\n          <p>{post.authorName}</p>\r\n        </div>\r\n        <div>\r\n          <img className=\"postImage\" src={post.imageLocation} alt={post.authorName}></img>\r\n        </div>\r\n        <div>\r\n          {isEditing ? (\r\n            <Form className=\"w-100\">\r\n              <InputGroup>\r\n                <Input\r\n                  bsSize=\"sm\"\r\n                  onChange={(e) => setPostEdits(e.target.value)}\r\n                  value={postEdits}\r\n                />\r\n                <ButtonGroup size=\"sm\">\r\n                  <Button onClick={(e) => {\r\n                    createEditPost();\r\n                    updatePost(post)\r\n                    hideEditForm()\r\n                  }}>Save</Button>\r\n                  <Button outline color=\"danger\" onClick={hideEditForm}>\r\n                    Cancel\r\n              </Button>\r\n                </ButtonGroup>\r\n              </InputGroup>\r\n            </Form>\r\n          ) : (\r\n              <>\r\n                {post.context}\r\n                {EditButton()}\r\n              </>\r\n            )}\r\n        </div>\r\n        <div>\r\n          <TagList tags={post.postTag} />\r\n        </div>\r\n      </div>\r\n      {/* DELETE CONFIRM MODAL */}\r\n      <Modal isOpen={pendingDelete}>\r\n        <ModalHeader>Delete post?</ModalHeader>\r\n        <ModalBody>\r\n          Are you sure you want to delete this post? This action cannot be\r\n          undone.\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button onClick={(e) => setPendingDelete(false)}>No, Cancel</Button>\r\n          <Button className=\"btn btn-outline-danger\" onClick={(e) => {\r\n            deletePost(post)\r\n            setPendingDelete(false);\r\n            Modal.isOpen = { pendingDelete }\r\n          }}>Yes, Delete</Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default PostCard;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagList.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagCard.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\utils\\WindowChecker.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostTagProvider.js",["117"],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Search.js",["118","119"],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":11,"column":3,"nodeType":"126","messageId":"127","endLine":11,"endColumn":13},{"ruleId":"124","severity":1,"message":"128","line":12,"column":3,"nodeType":"126","messageId":"127","endLine":12,"endColumn":7},{"ruleId":"124","severity":1,"message":"129","line":13,"column":3,"nodeType":"126","messageId":"127","endLine":13,"endColumn":9},{"ruleId":"124","severity":1,"message":"130","line":14,"column":3,"nodeType":"126","messageId":"127","endLine":14,"endColumn":8},{"ruleId":"124","severity":1,"message":"131","line":11,"column":9,"nodeType":"126","messageId":"127","endLine":11,"endColumn":16},{"ruleId":"124","severity":1,"message":"132","line":2,"column":25,"nodeType":"126","messageId":"127","endLine":2,"endColumn":33},{"ruleId":"124","severity":1,"message":"133","line":16,"column":11,"nodeType":"126","messageId":"127","endLine":16,"endColumn":21},{"ruleId":"134","severity":1,"message":"135","line":83,"column":13,"nodeType":"136","endLine":83,"endColumn":193},{"ruleId":"124","severity":1,"message":"128","line":5,"column":10,"nodeType":"126","messageId":"127","endLine":5,"endColumn":14},{"ruleId":"124","severity":1,"message":"137","line":5,"column":16,"nodeType":"126","messageId":"127","endLine":5,"endColumn":25},{"ruleId":"124","severity":1,"message":"138","line":10,"column":19,"nodeType":"126","messageId":"127","endLine":10,"endColumn":29},{"ruleId":"124","severity":1,"message":"139","line":22,"column":11,"nodeType":"126","messageId":"127","endLine":22,"endColumn":17},{"ruleId":"140","severity":1,"message":"141","line":59,"column":6,"nodeType":"142","endLine":59,"endColumn":8,"suggestions":"143"},{"ruleId":"124","severity":1,"message":"144","line":8,"column":18,"nodeType":"126","messageId":"127","endLine":8,"endColumn":32},{"ruleId":"140","severity":1,"message":"145","line":23,"column":6,"nodeType":"142","endLine":23,"endColumn":8,"suggestions":"146"},{"ruleId":"124","severity":1,"message":"147","line":42,"column":11,"nodeType":"126","messageId":"127","endLine":42,"endColumn":19},{"ruleId":"134","severity":1,"message":"135","line":108,"column":17,"nodeType":"136","endLine":108,"endColumn":197},{"ruleId":"124","severity":1,"message":"148","line":1,"column":40,"nodeType":"126","messageId":"127","endLine":1,"endColumn":48},{"ruleId":"140","severity":1,"message":"149","line":13,"column":6,"nodeType":"142","endLine":13,"endColumn":8,"suggestions":"150"},{"ruleId":"124","severity":1,"message":"151","line":12,"column":9,"nodeType":"126","messageId":"127","endLine":12,"endColumn":13},{"ruleId":"124","severity":1,"message":"131","line":13,"column":9,"nodeType":"126","messageId":"127","endLine":13,"endColumn":16},{"ruleId":"124","severity":1,"message":"131","line":9,"column":9,"nodeType":"126","messageId":"127","endLine":9,"endColumn":16},{"ruleId":"124","severity":1,"message":"152","line":7,"column":11,"nodeType":"126","messageId":"127","endLine":7,"endColumn":16},{"ruleId":"124","severity":1,"message":"131","line":9,"column":9,"nodeType":"126","messageId":"127","endLine":9,"endColumn":16},"no-native-reassign",["153"],"no-negated-in-lhs",["154"],"no-unused-vars","'NavbarText' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Button' is defined but never used.","'Input' is defined but never used.","'history' is assigned a value but never used.","'Redirect' is defined but never used.","'isLoggedIn' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'FormGroup' is defined but never used.","'setNewPost' is assigned a value but never used.","'answer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getQuiz'. Either include it or remove the dependency array.","ArrayExpression",["155"],"'getCurrentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTags'. Either include it or remove the dependency array.",["156"],"'newImage' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'getAllPosts'. Either include it or remove the dependency array.",["157"],"'user' is assigned a value but never used.","'posts' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [getQuiz]",{"range":"164","text":"165"},"Update the dependencies array to be: [getTags]",{"range":"166","text":"167"},"Update the dependencies array to be: [getAllPosts]",{"range":"168","text":"169"},[1734,1736],"[getQuiz]",[922,924],"[getTags]",[428,430],"[getAllPosts]"]