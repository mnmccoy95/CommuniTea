[{"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\index.js":"1","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\App.js":"2","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\reportWebVitals.js":"3","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\AppHeader.js":"4","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\ApplicationViews.js":"6","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\QuizProvider.js":"7","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Register.js":"8","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Quiz.js":"9","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Login.js":"10","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostProvider.js":"11","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\TagProvider.js":"12","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\NewPost.js":"13","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Discover.js":"14","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostList.js":"15","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostCard.js":"16","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagList.js":"17","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagCard.js":"18","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\utils\\WindowChecker.js":"19","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostTagProvider.js":"20","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Search.js":"21","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\InspirationProvider.js":"22","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Inspiration.js":"23","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\InspirationButton.js":"24","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\RemoveInspBtn.js":"25","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\SubscriptionBtn.js":"26","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\SubProvider.js":"27","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Home.js":"28","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\MySubs.js":"29","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\RemoveSubBtn.js":"30"},{"size":704,"mtime":1612466326933,"results":"31","hashOfConfig":"32"},{"size":501,"mtime":1611952599344,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"32"},{"size":2869,"mtime":1612371892668,"results":"35","hashOfConfig":"32"},{"size":3018,"mtime":1612458951802,"results":"36","hashOfConfig":"32"},{"size":2416,"mtime":1612545215337,"results":"37","hashOfConfig":"32"},{"size":821,"mtime":1611952871632,"results":"38","hashOfConfig":"32"},{"size":5348,"mtime":1612477709283,"results":"39","hashOfConfig":"32"},{"size":4442,"mtime":1612381813102,"results":"40","hashOfConfig":"32"},{"size":2135,"mtime":1612477491742,"results":"41","hashOfConfig":"32"},{"size":2581,"mtime":1612478986441,"results":"42","hashOfConfig":"32"},{"size":853,"mtime":1612296254399,"results":"43","hashOfConfig":"32"},{"size":5282,"mtime":1612476368377,"results":"44","hashOfConfig":"32"},{"size":524,"mtime":1612545352871,"results":"45","hashOfConfig":"32"},{"size":309,"mtime":1612461702665,"results":"46","hashOfConfig":"32"},{"size":4491,"mtime":1612551055767,"results":"47","hashOfConfig":"32"},{"size":306,"mtime":1612462192647,"results":"48","hashOfConfig":"32"},{"size":157,"mtime":1612467158174,"results":"49","hashOfConfig":"32"},{"size":185,"mtime":1612209274162,"results":"50","hashOfConfig":"32"},{"size":2016,"mtime":1612296344805,"results":"51","hashOfConfig":"32"},{"size":872,"mtime":1612472657404,"results":"52","hashOfConfig":"32"},{"size":1833,"mtime":1612375547699,"results":"53","hashOfConfig":"32"},{"size":798,"mtime":1612550316920,"results":"54","hashOfConfig":"32"},{"size":1441,"mtime":1612544446172,"results":"55","hashOfConfig":"32"},{"size":759,"mtime":1612550941951,"results":"56","hashOfConfig":"32"},{"size":1532,"mtime":1612550924486,"results":"57","hashOfConfig":"32"},{"size":2419,"mtime":1612549728424,"results":"58","hashOfConfig":"32"},{"size":739,"mtime":1612550389002,"results":"59","hashOfConfig":"32"},{"size":321,"mtime":1612548194320,"results":"60","hashOfConfig":"32"},{"size":896,"mtime":1612550936755,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1pem0fl",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"64"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"64"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\index.js",[],["134","135"],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\App.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\reportWebVitals.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\AppHeader.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\UserProfileProvider.js",["136"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\"\r\nimport { Spinner } from \"reactstrap\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport const UserProfileContext = createContext();\r\n\r\nexport function UserProfileProvider(props) {\r\n  const apiUrl = \"/api/userprofile\";\r\n  const history = useHistory();\r\n\r\n  const userProfile = localStorage.getItem(\"userProfile\");\r\n  const [isLoggedIn, setIsLoggedIn] = useState(userProfile != null);\r\n\r\n  const [isFirebaseReady, setIsFirebaseReady] = useState(false);\r\n  useEffect(() => {\r\n    firebase.auth().onAuthStateChanged((u) => {\r\n      setIsFirebaseReady(true);\r\n    });\r\n  }, []);\r\n\r\n  const login = (email, pw) => {\r\n    return firebase.auth().signInWithEmailAndPassword(email, pw)\r\n      .then((signInResponse) => getUserProfile(signInResponse.user.uid))\r\n      .then((userProfile) => {\r\n        if (userProfile.approved === 1) {\r\n          localStorage.setItem(\"userProfile\", JSON.stringify(userProfile));\r\n          setIsLoggedIn(true);\r\n          return userProfile\r\n        } else if (userProfile.approved === 2) {\r\n          localStorage.setItem(\"userProfile\", JSON.stringify(userProfile))\r\n          setIsLoggedIn(true);\r\n          return userProfile\r\n        }\r\n      });\r\n  };\r\n\r\n  const logout = () => {\r\n    return firebase.auth().signOut()\r\n      .then(() => {\r\n        localStorage.clear()\r\n        setIsLoggedIn(false);\r\n      });\r\n  };\r\n\r\n  const register = (userProfile, password) => {\r\n    return firebase.auth().createUserWithEmailAndPassword(userProfile.email, password)\r\n      .then((createResponse) => saveUser({ ...userProfile, firebaseUserId: createResponse.user.uid }))\r\n      .then((savedUserProfile) => {\r\n        localStorage.setItem(\"userProfile\", JSON.stringify(savedUserProfile));\r\n        setIsLoggedIn(true);\r\n      });\r\n  };\r\n\r\n  const getToken = () => firebase.auth().currentUser.getIdToken();\r\n\r\n  const getUserProfile = (firebaseUserId) => {\r\n    return getToken().then((token) =>\r\n      fetch(`${apiUrl}/${firebaseUserId}`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      }).then(resp => resp.json()));\r\n  };\r\n\r\n  const saveUser = (userProfile) => {\r\n    return getToken().then((token) =>\r\n      fetch(apiUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(userProfile)\r\n      }).then(resp => resp.json()));\r\n  };\r\n\r\n  const getCurrentUser = () => {\r\n    const user = localStorage.getItem(\"userProfile\");\r\n    if (!user) {\r\n      return null;\r\n    }\r\n    return JSON.parse(user);\r\n  };\r\n\r\n  return (\r\n    <UserProfileContext.Provider value={{ isLoggedIn, login, logout, register, getToken, getCurrentUser }}>\r\n      {isFirebaseReady\r\n        ? props.children\r\n        : <Spinner className=\"app-spinner dark\" />}\r\n    </UserProfileContext.Provider>\r\n  );\r\n}","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\ApplicationViews.js",["137"],"import React, { useContext } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { UserProfileContext } from '../providers/UserProfileProvider';\r\nimport { QuizProvider } from '../providers/QuizProvider'\r\nimport Login from '../pages/Login';\r\nimport Register from '../pages/Register';\r\nimport Quiz from '../pages/Quiz'\r\nimport { PostProvider } from '../providers/PostProvider'\r\nimport { TagProvider } from '../providers/TagProvider'\r\nimport Discover from '../pages/Discover'\r\nimport NewPost from '../pages/NewPost'\r\nimport { PostTagProvider } from '../providers/PostTagProvider';\r\nimport Search from \"../pages/Search\"\r\nimport { InspirationProvider } from '../providers/InspirationProvider'\r\nimport Inspiration from '../pages/Inspiration';\r\nimport Home from '../pages/Home'\r\nimport { SubProvider } from '../providers/SubProvider'\r\n\r\nconst ApplicationViews = () => {\r\n  const { isLoggedIn, getCurrentUser } = useContext(UserProfileContext);\r\n  const user = getCurrentUser();\r\n\r\n  const approvalChecker = () => {\r\n    if (user && user.approved === 2) {\r\n      return (\r\n        <QuizProvider>\r\n          <Route path=\"/quiz\">\r\n            <Quiz />\r\n          </Route>\r\n        </QuizProvider>)\r\n\r\n    } else if (user && user.approved === 1) {\r\n      return (<>\r\n        <PostTagProvider>\r\n          <PostProvider>\r\n            <TagProvider>\r\n              <InspirationProvider>\r\n                <SubProvider>\r\n                  <Route path=\"/discover\">\r\n                    <Search />\r\n                    <Discover />\r\n                  </Route>\r\n                  <Route path=\"/newpost\">\r\n                    <NewPost />\r\n                  </Route>\r\n                  <Route path=\"/search\">\r\n                    <Search />\r\n                  </Route>\r\n                  <Route path=\"/inspiration\">\r\n                    <Inspiration />\r\n                  </Route>\r\n                  <Route path=\"/\" exact>\r\n                    <Home />\r\n                  </Route>\r\n                </SubProvider>\r\n              </InspirationProvider>\r\n            </TagProvider>\r\n          </PostProvider>\r\n        </PostTagProvider>\r\n\r\n      </>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/login\">\r\n        <Login />\r\n      </Route>\r\n      <Route path=\"/register\">\r\n        <Register />\r\n      </Route>\r\n      {approvalChecker()}\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default ApplicationViews;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\QuizProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Register.js",["138"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport \"./Register.css\"\r\n\r\nconst Register = () => {\r\n  const { register } = useContext(UserProfileContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [displayName, setDisplayName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [pronouns, setPronouns] = useState(\"\");\r\n  const [bio, setBio] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirm, setConfirm] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const [imageLoading, setImageLoading] = useState(false)\r\n\r\n\r\n  const uploadImage = async e => {\r\n    const files = e.target.files\r\n    setImageLoading(true)\r\n    const data = new FormData()\r\n    data.append('file', files[0])\r\n    data.append('upload_preset', 'vugr9ics')\r\n    const res = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dddadzenw/image/upload/',\r\n      {\r\n        method: \"POST\",\r\n        body: data\r\n      }\r\n    )\r\n    const file = await res.json()\r\n    let image = file.secure_url\r\n    localStorage.setItem(\"image\", image)\r\n\r\n    setImageLoading(false)\r\n    const matches = document.querySelectorAll(\".hidden\");\r\n    for (const m of matches) {\r\n      m.style.display = \"block\"\r\n    }\r\n    document.querySelector(\".notHidden\").style.display = \"none\"\r\n  }\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (password !== confirm) {\r\n\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    const imageLocation = localStorage.getItem(\"image\")\r\n    const profile = {\r\n      displayName,\r\n      email,\r\n      imageLocation,\r\n      pronouns,\r\n      bio\r\n    };\r\n    register(profile, password)\r\n      .then((user) => {\r\n        setLoading(false);\r\n        history.push(\"/quiz\");\r\n        localStorage.removeItem(\"image\")\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form new-post-form-container\">\r\n      <form onSubmit={handleSubmit} className=\"new-post-form-area\">\r\n        <h2 className=\"text-center\">Register</h2>\r\n        <div className=\"form-group uploadForm\">\r\n          <div className='defaultImageContainer'>\r\n            <img className='defaultImage-register' src={localStorage.image ? localStorage.image : 'https://build.dfomer.com/wp-content/uploads/2016/04/dummy-post-horisontal-thegem-blog-default.jpg'} />\r\n          </div>\r\n\r\n          {imageLoading ? (\r\n            <h6 className=\"loadingImage\">Loading...</h6>\r\n          ) : <></>}\r\n\r\n\r\n          <br />\r\n          <label htmlFor=\"embedpollfileinput\" className=\"btn dangerBtn notHidden uploadButton\">\r\n            Upload image\r\n          </label>\r\n          <input hidden type=\"file\" onChange={uploadImage} className=\"inputfile\" id=\"embedpollfileinput\" />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setDisplayName(e.target.value)}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"displayName\"\r\n            placeholder=\"Display Name\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setConfirm(e.target.value)}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            name=\"confirmPassword\"\r\n            placeholder=\"Confirm Password\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setPronouns(e.target.value)}\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            name=\"pronouns\"\r\n            placeholder=\"Pronouns\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden\">\r\n          <Input\r\n            onChange={(e) => setBio(e.target.value)}\r\n            type=\"textarea\"\r\n            className=\"form-control\"\r\n            name=\"bio\"\r\n            rows=\"5\"\r\n            placeholder=\"Bio\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group hidden submitContainer\">\r\n          <Button type=\"submit\" className=\"dangerBtn btn\" disabled={loading}>\r\n            Sign Up\r\n          </Button>\r\n        </div>\r\n        <div className=\"text-center small\">\r\n          Already have an account?\r\n          <div>\r\n            <Link to=\"/login\">Log in here</Link>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Quiz.js",["139","140"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { QuizContext } from \"../providers/QuizProvider\"\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport \"./Quiz.css\"\r\nimport WindowChecker from \"../utils/WindowChecker\";\r\n\r\nconst Quiz = () => {\r\n  const [newPost, setNewPost] = useState([]);\r\n  const { getToken, logout } = useContext(UserProfileContext);\r\n  const history = useHistory();\r\n\r\n  const handleSubmitQuiz = (e) => {\r\n    e.preventDefault();\r\n    const answers = []\r\n    for (const id of newPost) {\r\n      if (id !== undefined) {\r\n        answers.push(parseInt(id))\r\n      }\r\n    }\r\n\r\n    return getToken().then((token) =>\r\n      fetch(`/api/userprofile/answer`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(answers)\r\n      }).then(resp => resp.json())\r\n        .then((resp) => {\r\n          if (resp.approved === 1) {\r\n            localStorage.setItem(\"userProfile\", JSON.stringify(resp))\r\n            history.push(\"/discover\")\r\n            window.location.reload()\r\n\r\n          } else {\r\n            logout()\r\n          }\r\n        }))\r\n  }\r\n\r\n  const handleControlledInputChange = (event) => {\r\n    newPost[event.target.name] = event.target.id\r\n  }\r\n\r\n  // const handleControlledCheckChange = (event) => {\r\n  //   if (event.target.checked === true) {\r\n  //     newPost[event.target.name] += (event.target.id)\r\n  //   } else {\r\n  //     newPost[event.target.name] -= (event.target.id)\r\n  //   }\r\n  // }\r\n\r\n  const { quiz, getQuiz } = useContext(QuizContext);\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getQuiz();\r\n  }, [])\r\n\r\n  const QuestionCard = ({ question }) => {\r\n\r\n    const questionCard = (q) => {\r\n      if (q.questionType.name === \"MultipleChoice\") {\r\n        return (<>\r\n          <fieldset className=\"questionBox\" id={q.id}>\r\n            <div className=\"form-group\">\r\n              <div className=\"questionTitle\">{q.content}</div>\r\n              {q.answers.map((a) => {\r\n                return (<>\r\n                  <input type=\"radio\" className=\"quizAnswer\" value={a.id} name={q.id} id={a.id} required=\"required\"\r\n                    onChange={(e) => { handleControlledInputChange(e) }}></input>\r\n                  <label htmlFor={a.id}>{a.content}</label><br />\r\n                </>)\r\n              })}\r\n            </div>\r\n          </fieldset>\r\n        </>\r\n        )\r\n      } else if (q.questionType.name === \"TrueFalse\") {\r\n        return (<>\r\n          <fieldset className=\"questionBox\" id={q.id}>\r\n            <div className=\"form-group\">\r\n              <div className=\"questionTitle\">{q.content}</div>\r\n              {q.answers.map((a) => {\r\n                return (<>\r\n                  <input type=\"radio\" className=\"quizAnswer\" value={a.id} name={q.id} id={a.id} required=\"required\"\r\n                    onChange={(e) => { handleControlledInputChange(e) }}></input>\r\n                  <label htmlFor={a.id}>{a.content}</label><br />\r\n                </>)\r\n              })}\r\n            </div>\r\n          </fieldset>\r\n        </>\r\n        )\r\n      }\r\n      // else if (q.questionType.name === \"MultipleAnswer\") {\r\n      //   return (<>\r\n      //     <fieldset id={q.id}>\r\n      //       <div>{q.content}</div>\r\n      //       {q.answers.map((a) => {\r\n      //         return (<>\r\n      //           <input type=\"checkbox\" class=\"check\" value={a.id} name={q.id} id={a.id}\r\n      //             onChange={(e) => { handleControlledCheckChange(e) }}\r\n      //             defaultChecked={false}></input>\r\n      //           <label htmlFor={a.id}>{a.content}</label><br />\r\n      //         </>)\r\n      //       })}\r\n      //     </fieldset>\r\n      //   </>\r\n      //   )\r\n      // }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        { questionCard(question)}\r\n      </>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <section className=\"new-post-form-container\">\r\n      <div className=\"new-post-form-area\">\r\n        <h2 className=\"new-post-form-title\">Quiz Time!</h2>\r\n        <form className=\"quiz-form\">\r\n          {quiz.map((q) => (\r\n\r\n            <QuestionCard key={q.id} question={q} />\r\n\r\n          ))}\r\n          <button className=\"btn btn-quiz-submit\" onClick={(e) => { handleSubmitQuiz(e) }}>Submit Quiz</button>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Quiz;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Login.js",["141"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\n\r\nconst Login = () => {\r\n  const { login, getCurrentUser } = useContext(UserProfileContext);\r\n  const [loading, setLoading] = useState(false);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const history = useHistory();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n    login(email, password)\r\n      .then((user) => {\r\n        setLoading(false);\r\n        if (user.approved === 2) {\r\n          history.push(\"/quiz\")\r\n        } else {\r\n          history.push(\"/\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        setLoading(false);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-form new-post-form-container\" >\r\n      <form onSubmit={handleSubmit} className=\"new-post-form-area\">\r\n        <h2 className=\"text-center\">Login</h2>\r\n        <div className=\"form-group\">\r\n          <Input\r\n            onChange={(e) => setEmail(e.target.value)}\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            name=\"email\"\r\n            placeholder=\"Email\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <Input\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            name=\"password\"\r\n            placeholder=\"Password\"\r\n            required=\"required\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group submitContainer\">\r\n          <Button type=\"submit\" className=\"dangerBtn btn\" disabled={loading}>\r\n            Sign in\r\n          </Button>\r\n        </div>\r\n        <div className=\"text-center small\">\r\n          Don't have an account?\r\n          <div>\r\n            <Link to=\"/register\">Sign up here</Link>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\TagProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\NewPost.js",["142","143","144"],"import React, { useEffect, useState, useContext } from \"react\";\r\nimport { TagContext } from \"../providers/TagProvider\"\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport WindowChecker from \"../utils/WindowChecker\";\r\nimport \"./NewPost.css\"\r\nimport { Typeahead } from 'react-bootstrap-typeahead';\r\nimport { FormGroup, Input } from \"reactstrap\"\r\nimport 'react-bootstrap-typeahead/css/Typeahead.css';\r\nimport { PostTagContext } from \"../providers/PostTagProvider\"\r\n\r\nconst NewPost = () => {\r\n  const { tags, getTags } = useContext(TagContext);\r\n  const { getToken } = useContext(UserProfileContext);\r\n  const { addPostTag } = useContext(PostTagContext);\r\n  const [multiSelections, setMultiSelections] = useState([]);\r\n  const [post, setPost] = useState([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getTags();\r\n  }, []);\r\n\r\n  const [imageLoading, setImageLoading] = useState(false)\r\n\r\n  const uploadImage = async e => {\r\n    const files = e.target.files\r\n    setImageLoading(true)\r\n    const data = new FormData()\r\n    data.append('file', files[0])\r\n    data.append('upload_preset', 'z0vejl5n')\r\n    const res = await fetch(\r\n      'https://api.cloudinary.com/v1_1/dddadzenw/image/upload',\r\n      {\r\n        method: \"POST\",\r\n        body: data\r\n      }\r\n    )\r\n    const file = await res.json()\r\n    let image = file.secure_url\r\n    const newImage = localStorage.setItem(\"image\", image);\r\n\r\n    setImageLoading(false)\r\n    const matches = document.querySelectorAll(\".hidden\");\r\n    for (const m of matches) {\r\n      m.style.display = \"inline-block\"\r\n    }\r\n    document.querySelector(\".notHidden\").style.display = \"none\"\r\n  }\r\n\r\n  const submitPost = (post) => {\r\n    getToken().then((token) => {\r\n      fetch(`/api/post`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(post)\r\n      })\r\n        .then((res) => res.json())\r\n        .then((res) => {\r\n          for (const tag of multiSelections) {\r\n            const postId = res.id;\r\n            const tagId = tag.id;\r\n            const postTag = {\r\n              postId,\r\n              tagId\r\n            };\r\n            addPostTag(postTag)\r\n          }\r\n        })\r\n        .then((data) => history.push(`/`))\r\n        .then(localStorage.removeItem(\"image\"))\r\n    })\r\n  }\r\n\r\n  const handleControlledInputChange = (event) => {\r\n    const newPost = { ...post }\r\n    newPost[event.target.name] = event.target.value\r\n    setPost(newPost)\r\n  }\r\n\r\n  const handleClickSubmitPost = (event) => {\r\n    event.preventDefault()\r\n    post.imageLocation = localStorage.getItem(\"image\");\r\n\r\n    const user = JSON.parse(localStorage.getItem('userProfile'));\r\n    if (user == null) {\r\n      history.push(\"/login\")\r\n    }\r\n    else {\r\n      submitPost(post)\r\n    }\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <section className=\"new-post-form-container\">\r\n      <div className=\"new-post-form-area\">\r\n        <h2 className=\"new-post-form-title\">Create A New Post</h2>\r\n        <form id=\"newPostForm\" onSubmit={(e) => { handleClickSubmitPost(e) }}>\r\n          <fieldset>\r\n            <div className=\"form-group uploadForm\">\r\n              <div className='defaultImageContainer'>\r\n                <img className='defaultImage' src={localStorage.image ? localStorage.image : 'https://build.dfomer.com/wp-content/uploads/2016/04/dummy-post-horisontal-thegem-blog-default.jpg'} />\r\n              </div>\r\n              {imageLoading ? (\r\n                <h6 className=\"loadingImage\">Loading...</h6>\r\n              ) : <></>}\r\n              <br />\r\n              <label htmlFor=\"embedpollfileinput\" className=\"btn btn-info notHidden uploadButton dangerBtn\">\r\n                Upload image\r\n              </label>\r\n              <input hidden type=\"file\" onChange={uploadImage} className=\"inputfile\" id=\"embedpollfileinput\" />\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <div className=\"form-group hidden w-100 h-100\">\r\n              <FormGroup>\r\n                <label className=\"new-post-label\" htmlFor=\"newBody\"></label>\r\n                <Input type=\"textarea\" rows=\"10\" className=\"newBody w-100 h-100\" id=\"content\" name=\"content\" placeholder=\"Tell us more!\" onChange={(e) => { handleControlledInputChange(e) }} required autoFocus />\r\n              </FormGroup>\r\n            </div>\r\n          </fieldset>\r\n          <fieldset>\r\n            <div className=\"form-group hidden w-100 h-100\">\r\n              <FormGroup>\r\n                <Typeahead\r\n                  id=\"basic-typeahead-multiple\"\r\n                  labelKey=\"name\"\r\n                  multiple\r\n                  onChange={setMultiSelections}\r\n                  options={tags}\r\n                  placeholder=\"Choose tags...\"\r\n                  selected={multiSelections}\r\n                />\r\n              </FormGroup>\r\n            </div>\r\n          </fieldset>\r\n          <fieldset className=\"hidden submitContainer\">\r\n            <button className=\"submitNewPostBtn hidden btn dangerBtn\" type=\"submit\" > Submit Post </button>\r\n          </fieldset>\r\n        </form>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default NewPost;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Discover.js",["145"],"import React, { useContext, useEffect } from 'react';\r\nimport PostList from '../components/PostList';\r\nimport { PostContext } from '../providers/PostProvider'\r\nimport WindowChecker from '../utils/WindowChecker';\r\n\r\nconst Explore = () => {\r\n  const { posts, getAllPosts } = useContext(PostContext);\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getAllPosts();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"postList\">\r\n        <PostList posts={posts} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Explore;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostList.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\PostCard.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagList.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\TagCard.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\utils\\WindowChecker.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\PostTagProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Search.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\InspirationProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Inspiration.js",["146","147","148","149"],"import React, { useContext, useEffect } from 'react';\r\nimport PostList from '../components/PostList';\r\nimport { InspirationContext } from \"../providers/InspirationProvider\"\r\nimport { Container, Col, Row } from \"reactstrap\"\r\nimport WindowChecker from '../utils/WindowChecker';\r\n\r\nconst Inspiration = () => {\r\n  const { inspiration, getInspirationByUser } = useContext(InspirationContext);\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getInspirationByUser();\r\n  }, []);\r\n\r\n  const InspChecker = () => {\r\n    if (inspiration.length > 0) {\r\n      return (<div className=\"postList\">\r\n        <PostList posts={inspiration} />\r\n      </div>)\r\n    } else {\r\n      return (<p>You have no saved inspiration!</p>)\r\n    }\r\n  }\r\n\r\n  return (\r\n\r\n    <InspChecker />\r\n\r\n  );\r\n};\r\n\r\nexport default Inspiration;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\InspirationButton.js",["150"],"import React, { useContext, useEffect } from \"react\";\r\nimport { InspirationContext } from \"../providers/InspirationProvider\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport \"./PostCard.css\"\r\n\r\nconst InspirationButton = ({ id }) => {\r\n  const { inspiration, getInspirationByUser, addInspiration, deleteInspiration } = useContext(InspirationContext);\r\n  const { getCurrentUser } = useContext(UserProfileContext);\r\n  const user = getCurrentUser();\r\n\r\n  useEffect(() => {\r\n    getInspirationByUser()\r\n  }, [])\r\n\r\n  const addInsp = (event) => {\r\n    const postId = parseInt(event.target.id)\r\n    const userProfileId = parseInt(user.id)\r\n    const insp = {\r\n      postId, userProfileId\r\n    }\r\n    addInspiration(insp)\r\n  }\r\n\r\n  const deleteInsp = (event) => {\r\n    const postId = parseInt(event.target.id)\r\n    deleteInspiration(postId)\r\n  }\r\n\r\n  const inspChecker = () => {\r\n    const inspExist = inspiration.map((i) => { return i.id });\r\n    if (inspExist.includes(id)) {\r\n      return (<button id={id} onClick={(e) => { deleteInsp(e) }} className=\"removeInsp btn btn-lg\"><i id={id} className=\"fas fa-heart fa-2x\"></i></button>)\r\n    } else {\r\n      return (<button id={id} onClick={(e) => { addInsp(e) }} className=\"addInsp btn btn-lg\"><i id={id} className=\"fas fa-heart fa-2x\"></i></button>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {inspChecker()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InspirationButton;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\RemoveInspBtn.js",["151"],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\SubscriptionBtn.js",["152"],"import React, { useContext, useEffect } from \"react\";\r\nimport { SubContext } from \"../providers/SubProvider\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\"\r\nimport \"./PostCard.css\"\r\n\r\nconst SubscriptionButton = ({ post }) => {\r\n  const { rawSubs, getSubList, addSub, deleteSub } = useContext(SubContext);\r\n  const { getCurrentUser } = useContext(UserProfileContext);\r\n  const user = getCurrentUser();\r\n\r\n  useEffect(() => {\r\n    getSubList()\r\n  }, [])\r\n\r\n  const addSubscription = (event) => {\r\n    const providerUserProfileId = parseInt(event.target.id)\r\n    const subscriberUserProfileId = parseInt(user.id)\r\n    const sub = {\r\n      providerUserProfileId, subscriberUserProfileId\r\n    }\r\n    addSub(sub)\r\n  }\r\n\r\n  const deleteSubscription = (event) => {\r\n    const providerUserProfileId = parseInt(event.target.id)\r\n    const subscriberUserProfileId = parseInt(user.id)\r\n    deleteSub(providerUserProfileId, subscriberUserProfileId)\r\n  }\r\n\r\n  const subChecker = () => {\r\n    const subExist = rawSubs.map((s) => { return s.providerUserProfileId })\r\n    if (subExist.includes(post.authorId)) {\r\n      return (<button id={post.authorId} className=\"cancelBtn btn\" onClick={(e) => { deleteSubscription(e) }}>Unsubscribe</button>)\r\n    } else {\r\n      return (<button id={post.authorId} className=\"dangerBtn btn\" onClick={(e) => { addSubscription(e) }}>Subscribe</button>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"subBtn\">\r\n      {subChecker()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubscriptionButton;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\providers\\SubProvider.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\pages\\Home.js",["153","154","155"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { SubContext } from \"../providers/SubProvider\"\r\nimport WindowChecker from \"../utils/WindowChecker\";\r\nimport MySubs from \"../components/MySubs\";\r\nimport PostList from \"../components/PostList\"\r\n\r\n\r\nconst Subscriptions = () => {\r\n  const { subs, getSubsByUser } = useContext(SubContext);\r\n\r\n  useEffect(() => {\r\n    WindowChecker()\r\n    getSubsByUser()\r\n  }, []);\r\n\r\n\r\n  const SubChecker = () => {\r\n    if (subs.length > 0) {\r\n      return (<div className=\"postList\">\r\n        <PostList posts={subs} />\r\n      </div>)\r\n    } else {\r\n      return (<p>You have no subscriptions!</p>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <SubChecker />\r\n  );\r\n};\r\n\r\nexport default Subscriptions;","C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\MySubs.js",[],"C:\\Users\\xshin\\workspace\\CommuniTea\\client\\src\\components\\RemoveSubBtn.js",[],{"ruleId":"156","replacedBy":"157"},{"ruleId":"158","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":11,"column":9,"nodeType":"162","messageId":"163","endLine":11,"endColumn":16},{"ruleId":"160","severity":1,"message":"164","line":20,"column":11,"nodeType":"162","messageId":"163","endLine":20,"endColumn":21},{"ruleId":"165","severity":1,"message":"166","line":83,"column":13,"nodeType":"167","endLine":83,"endColumn":202},{"ruleId":"160","severity":1,"message":"168","line":9,"column":19,"nodeType":"162","messageId":"163","endLine":9,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":60,"column":6,"nodeType":"171","endLine":60,"endColumn":8,"suggestions":"172"},{"ruleId":"160","severity":1,"message":"173","line":8,"column":18,"nodeType":"162","messageId":"163","endLine":8,"endColumn":32},{"ruleId":"169","severity":1,"message":"174","line":23,"column":6,"nodeType":"171","endLine":23,"endColumn":8,"suggestions":"175"},{"ruleId":"160","severity":1,"message":"176","line":42,"column":11,"nodeType":"162","messageId":"163","endLine":42,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":108,"column":17,"nodeType":"167","endLine":108,"endColumn":197},{"ruleId":"169","severity":1,"message":"177","line":12,"column":6,"nodeType":"171","endLine":12,"endColumn":8,"suggestions":"178"},{"ruleId":"160","severity":1,"message":"179","line":4,"column":10,"nodeType":"162","messageId":"163","endLine":4,"endColumn":19},{"ruleId":"160","severity":1,"message":"180","line":4,"column":21,"nodeType":"162","messageId":"163","endLine":4,"endColumn":24},{"ruleId":"160","severity":1,"message":"181","line":4,"column":26,"nodeType":"162","messageId":"163","endLine":4,"endColumn":29},{"ruleId":"169","severity":1,"message":"182","line":13,"column":6,"nodeType":"171","endLine":13,"endColumn":8,"suggestions":"183"},{"ruleId":"169","severity":1,"message":"182","line":13,"column":6,"nodeType":"171","endLine":13,"endColumn":8,"suggestions":"184"},{"ruleId":"160","severity":1,"message":"185","line":9,"column":9,"nodeType":"162","messageId":"163","endLine":9,"endColumn":13},{"ruleId":"169","severity":1,"message":"186","line":13,"column":6,"nodeType":"171","endLine":13,"endColumn":8,"suggestions":"187"},{"ruleId":"160","severity":1,"message":"188","line":1,"column":40,"nodeType":"162","messageId":"163","endLine":1,"endColumn":48},{"ruleId":"160","severity":1,"message":"189","line":4,"column":8,"nodeType":"162","messageId":"163","endLine":4,"endColumn":14},{"ruleId":"169","severity":1,"message":"190","line":14,"column":6,"nodeType":"171","endLine":14,"endColumn":8,"suggestions":"191"},"no-native-reassign",["192"],"no-negated-in-lhs",["193"],"no-unused-vars","'history' is assigned a value but never used.","Identifier","unusedVar","'isLoggedIn' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setNewPost' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getQuiz'. Either include it or remove the dependency array.","ArrayExpression",["194"],"'getCurrentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTags'. Either include it or remove the dependency array.",["195"],"'newImage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllPosts'. Either include it or remove the dependency array.",["196"],"'Container' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","React Hook useEffect has a missing dependency: 'getInspirationByUser'. Either include it or remove the dependency array.",["197"],["198"],"'user' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getSubList'. Either include it or remove the dependency array.",["199"],"'useState' is defined but never used.","'MySubs' is defined but never used.","React Hook useEffect has a missing dependency: 'getSubsByUser'. Either include it or remove the dependency array.",["200"],"no-global-assign","no-unsafe-negation",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"207","fix":"209"},{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},"Update the dependencies array to be: [getQuiz]",{"range":"214","text":"215"},"Update the dependencies array to be: [getTags]",{"range":"216","text":"217"},"Update the dependencies array to be: [getAllPosts]",{"range":"218","text":"219"},"Update the dependencies array to be: [getInspirationByUser]",{"range":"220","text":"221"},{"range":"222","text":"221"},"Update the dependencies array to be: [getSubList]",{"range":"223","text":"224"},"Update the dependencies array to be: [getSubsByUser]",{"range":"225","text":"226"},[1764,1766],"[getQuiz]",[929,931],"[getTags]",[368,370],"[getAllPosts]",[467,469],"[getInspirationByUser]",[534,536],[473,475],"[getSubList]",[428,430],"[getSubsByUser]"]